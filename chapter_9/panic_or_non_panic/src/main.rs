// 언제 `Panic!` 을 써야 하고 언제 `Result`를 반환할지 어떻게 결정해야하는가?

/**
 * 코드가 패닉을 일으킬 때는 복구할 방법이 없다.
 * 복구 가능한 방법이 있든 혹은 그렇지 않든 작성자는 어떤 에러 상황에 대해 `panic!`을 호출할 수 있지만
 * `panic!`을 호출할 때는 항상 프로그램이 더 이상 실행될 수 없는 상황임을 명확히 해야한다.
 *
 * `Result`값을 반환하는 선택을 한다면, 호출하는 코드에게 결단을 내려주기보다는 옵션을 제공하는 것이다.
 * 해당 Function의 사용자는 자신의 상황에 맞게 선택할 수 있게 된다.
 *
 * 그러므로, 실패할지도 모르는 함수를 정의할 때는 `Result`를 반환하는 것이 좋다.
 */

/**
 * 프로토타입 코드, 테스트 코드, 예제 코드 등에서는 `panic!`을 일으켜도 괜찮다.
 *
 * 테스트 중에 오류가 발생했다는것은 테스트가 실패했다는것으 의미하므로 `panic!`을 일으켜 테스트를 실패하도록 한다.
 * 이때 `unwrap`이나 `expect`를 사용하여 간단하게 테스트를 실패하도록 만들 수 있다.
 */

/**
 * 컴파일러보다 작성자가 더 많은 정보를 가지고 있을 때
 *
 */

fn main() {
    println!("Hello, world!");
}
